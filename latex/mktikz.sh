# Compiles a set of .tikz files into .pdf figures. Usage:
#       ./mkfig.sh width height output_directory files
# where:
# - width is the width of the figure, relative to \linewidth
# - height is the height of the figure, relative to \linewidth
# - output_directory is the directory in which pdf files will be generated
# - files is a regular expression indicating one or more .tikz files

# Notice that the value of \linewidth used is the one for the standard book class.
# This should work well in most cases.

# For best results, when including the pdf figures use the same width as the one here specified.
# In this way, text size will be the same in all figures.

# NOTICE: this script works correctly if input .tikz files do not have width and height specifications;
# this is usually the case for a file generated by pgfplotlib.
# TODO: maybe check if input files already have a specification for width and height.



#############
# FUNCTIONS #
#############

makesinglefig () { # this makes a single figure; what did you expect?

    # create temp folder if it doesn't exist
    if [[ -d /tmp/mktikzfig ]]
    then
        true # this does nothing
    else
        mkdir /tmp/mktikzfig
    fi

    filenamewext=$(basename -- ${1})
    filename=${filenamewext%.*}

    # add line to specify size (move file to a new one in the mean time)
    lnadd=$(awk '/begin{axis}/{print NR; exit}' $1) # find line of begin{axis}
    lnadd=$((lnadd+1))
    # this actually adds the line; it creates a new mkfigtempfileorary file
    sed "${lnadd}"'i\
    width='"${3}"'\\\linewidth, height='"${4}"'\\\linewidth,
    ' $1 > /tmp/mktikzfig/mkfigtempfile_fig.tikz

    touch /tmp/mktikzfig/mkfigtempfile.tex
    echo "\documentclass[class=book]{standalone}" >> /tmp/mktikzfig/mkfigtempfile.tex
    echo "\usepackage{pgfplots}" >> /tmp/mktikzfig/mkfigtempfile.tex
    echo "\usepackage{adjustbox}" >> /tmp/mktikzfig/mkfigtempfile.tex
    printf '\\begin{document}' >> /tmp/mktikzfig/mkfigtempfile.tex
    echo "\input{/tmp/mktikzfig/mkfigtempfile_fig.tikz}" >> /tmp/mktikzfig/mkfigtempfile.tex
    echo "\end{document}" >> /tmp/mktikzfig/mkfigtempfile.tex

    # compile
    # notice that command is grepped; output is printed only if (at least) a line starting with "!" is present
    # 200 lines are printed after "!" is found; they are colored in red
    # https://tex.stackexchange.com/a/459470
    : | pdflatex -halt-on-error -output-directory /tmp/mktikzfig /tmp/mktikzfig/mkfigtempfile.tex | grep '^!.*' -A200 --color=always

    # TODO: check that command did generate output; if it didn't, then run it again without suppressing output
    # I'm not entirely sure that this would work: if the above command doesn't work, it simply gets stuck without terminating execution
    # Maybe you need some timer
    # Or maybe just make sure it works

    mv /tmp/mktikzfig/mkfigtempfile.pdf $2/$filename.pdf
    rm -rf /tmp/mktikzfig # remove temp folder

}



#################
# ACTUAL SCRIPT #
#################

# check number of inputs WRONG: YOU SHOULD PROBABLY CHECK EVERY ARGUMENT ONE BY ONE
#if [ "$#" -ne 4 ]; then
#    echo "ERROR: user must specify 4 input parameters, as in:"
#    echo "./mkfig.sh files output_directory width height"
#    echo
#    exit 1
#fi

# check existence of input files
if ls $4 1> /dev/null 2>&1; then # tries to list files; if no file is listed, then it casts an error
    true # this does nothing
else
    echo "ERROR: specified input files do not exist."
    exit 1
fi

# check existance of output directory
if [[ -d $3 ]]
then
    true # this does nothing
else
    echo "ERROR: specified output directory does not exist."
    exit 1
fi

# generate images one by one
counter=1
for file
do
    if [ "$counter" -ge 4 ]; then
        makesinglefig $file $3 $1 $2
    fi
    counter=$((counter+1))
done
